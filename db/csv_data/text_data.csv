genre,title,content
Basic,Macのショートカットキー,パソコンになれてないなら、まずはショートカットキーから使えるようにしていきましょう。ここにあげてあるショートカットキーを使えないと、プログラミングの学習効率は全く上がらないです。 プログラマーなるなら必須中の必須なので、ぜひ使いこなせるようにしてください。絶対にこれだけは覚えて！というショートカットキーは以下の通り。 上書き保存 ``` command + s ``` コピー ``` command + c ``` カット ``` command + x ``` ペースト ``` command + v ``` 更新 ``` command + r ``` 新しいウインドウを開く（ブラウザ、テキストエディタなど） ``` command + t ``` 新規で開く（ブラウザ、テキストエディタなど） ``` command + n ``` アプリの切り替え ``` shift + tab ``` # まとめ パソコンの操作スピードを上げるためにも、ショートカットキーを活用することはとても重要になってきます。特に、コピー&ペーストや上書き保存は、ショートカットキーを使用するのとそうでないのでは大きな差が出てくるので、ぜひ使えるようにしておきましょう。
Basic,Linuxコマンド,Linuxコマンドは、Ruby on Railsアプリを開発するときにもよく使うコマンドです。Macでプログラミングを学ぶ際に、このLinuxコマンドの知識が必須となりますので、一つ一つ確認していきましょう。 また、Linuxコマンドにはたくさんの種類がありますが、こちらではよく使用するコマンドを抽出して載せるようにします。上に書いてあるものから順に覚えて行くと無駄なく学習することができます。 ## cd ディレクトリ間を移動するときのコマンドは以下のようになります。 `directory_name` には、自分が移動したいディレクトリの名前を入れましょう。 ``` cd directory_name ``` ためしに、 `cd` コマンドを利用して `desktop` へ移動してみましょう。 ``` cd desktop ``` コマンドを実行した後のターミナルの表示に `desktop` という表示が含まれていれば移動は成功です。ターミナルでは、このように `cd` コマンドを利用してパソコン内を移動します。非常によく利用するコマンドなので、是非使えるようにしておきましょう。 ``` MacBook-Pro-2:desktop your_name$ ``` ## ls 現在操作を行なっているディレクトリにあるファイルや、他のディレクトリを一覧表示するためには`ls`コマンドを実行します。 `cd` コマンドでディレクトリ間の移動を行い、 `ls` コマンドで操作したいディレクトリやファイルが存在するかどうかを調べるというのがよくある使い方です。 ``` ls ``` ## pwd ターミナル上で操作対象となっているディレクトリの場所を表示するコマンドです。これを実行すると、ディレクトリのパスが表示されます。 ``` pwd ``` 実行結果 ``` /Users/yoshito/desktop ``` ## touch 新しいファイルを作成するときには`touch`コマンドを使用します。`directory_name`には自分が作成したいファイル名を拡張子を含めて指定します。 ``` touch file_name ``` 例 ``` touch sample.rb ``` ## mkdir 新しいディレクトリを作成するときは`mkdir`コマンドを使用します。`directory_name`には自分が作成したいディレクトリ名を指定します。 ``` mkdir directory_name ``` 例 ``` mkdir sample ``` # まとめ Linuxコマンドは、Macの操作をする上ではとても重要なコマンドとなります。プログラミングをやるときにも、これらのコマンドはよく使用するのでぜひ使えるようにしてみてください。
Basic,Slackを使用したいろんなマークダウン記法,Slackを使いこなすと、プログラミング学習の効率もぐんと上がる（特に質問の仕方が上手くなる）ので、ぜひマークダウン記法を利用してみてください！ |No.|記入方法|用途| |---|---|---| |1|@hoge|hogeさん、あるいは hoge グループあてのコメントになる| |2|#hoge| チャンネル　hoge へのリンクになる| |3| \`サンプルコード \`|ボーダーで囲まれ、文字色赤、背景灰色になる| |4| \`\`\` サンプルコード \`\`\` |ボーダーで囲まれ、 \`\`\` で発言を開始すると再び \`\`\` が来るまでは改行しても送信しない| |5|>引用文|引用表現にする| |6|>>>引用文|改行含めた段落全体を引用表現にする| |7|\_slack_|文字をイタリックにする| |8|\*slack*|文字をボールドにする| |9|\~slack~|文字をストライク（取り消し線）にする| No.3, 4 の記法を使用した時の表示は以下のようになります。 <font color="DeepPink">No.3の書き方：1行のコードを書く場合</font> ``` No.4の書き方 複数行のコードを書く場合 ``` # まとめ Slackにおいてマークダウンを使用するとコミュニケーション効率が圧倒的に上がるので、ぜひ活用して見てください。
Basic,超便利なMarkdownの基本,Markdownは、プログラミングのコードをまとめる上でとても役に立つものです。 普通、プログラミングを学んでいるときにノウハウをまとめるのはプログラマーなら常識なのですが、それをただテキストでまとめるだけだとめちゃくちゃ効率が悪いです。 なぜなら、コードと、そのコードに対応する説明の区別ができなくなってしまい、かえって理解するのが難しくなってしまうためです。これでは、せっかくノウハウをまとめても無駄に終わってしまいます。 例えば、Rubyのコードを以下のようにMarkdownを使わず普通にまとめてみたとしましょう。 --- ターミナルに「Hello World」を出力する puts "hello world" putsは右側に書かれたもの（引数）をターミナルに出力させるためのメソッドです --- 上記のようにまとめても、どこがRubyのコードで、どこがそのコードに対する説明なのかがかなりわかりづらいです。しかし、それがMarkdownを使用すると以下のようにまとめることができます。 --- ターミナルに`Hello World`を出力する ```ruby # puts : ターミナルに文字や数字などの情報を出力する puts "hello world" ``` `puts`は右側に書かれたもの（引数）をターミナルに出力させるためのメソッドです --- どうでしょう？ かなりコードが見やすくなったのではないでしょうか？？ 上記のようにプログラミングのコードを色付き（シンタックスハイライト）でまとめるには、以下のような記述をします。 --- ターミナルに\`Hello World\`を出力する \```ruby \# puts : ターミナルに文字や数字などの情報を出力する puts "hello world" \``` \`puts\`は右側に書かれたもの（引数）をターミナルに出力させるためのメソッドです --- このように、Markdownは特定の記号を使用することによって、プログラミングのコードを綺麗にまとめることができます。これを使用すると、爆速でノウハウをまとめられるようになるので、ぜひご活用ください。ちなみに、当サロンの教材もMarkdownを利用してまとめています。 以下に、具体的なMarkdownの記法をまとめておきます。 |記入方法|用途| |---|---| |#|大見出し（HTMLのH1に相当する）| |##|中見出し（HTMLのH2に相当する）| |###|小見出し（HTMLのH3に相当する）| |\---|水平線（HTMLのhrに相当）| |>引用文|引用表現にする| |>>>引用文|改行含めた段落全体を引用表現にする| |\`サンプルコード`|1行のコードをボーダーで囲み、背景を灰色にする| |\`\`\` サンプルコード \`\`\`|複数行のコードをボーダーで囲み、背景を灰色にする| |\_hoge_|文字（hogeの部分）をイタリックにする| |\*hoge*|文字（hogeの部分）をボールドにする| |\~hoge~|文字（hogeの部分）をストライク（取り消し線）にする| また、上のテーブルもMarkdownで作ることができます。こちらもノウハウをまとめるためにはとても便利な記述です。上のようなテーブルを表示するときは以下のように記述します。 --- \|記入方法\|用途\| \|\---\|---\| \|#\|大見出し（HTMLのH1に相当する）\| \|##\|中見出し（HTMLのH2に相当する）\| \|###\|小見出し（HTMLのH3に相当する）\| --- これだけでHTMLのtableタグが生成されるので、あとはそれにCSSを適用すれば自分の好きなデザインのテーブルを作成することができます。 # まとめ テキストでプログラミングのノウハウをまとめる上で、Markdownは本当に最強です。また、Markdown で作成したコンテンツに関しては、HTML、ワードファイル、PDFに変換することができ、コンテンツの横展開につながります。 これを利用して独自のコンテンツを作成すれば、自身が復習をする際にも役立ちますし、独自教材を作るのもかなり楽になります。生産性がめちゃくちゃ高くなるので、ぜひ活用してみてください。
Basic,現場でやったらあかんこと,こちらは、現場でやったらあかんことをどんどん追加していきます。神里の失敗経験も書きますのでどんどん踏み台にしてください。 # Githubリポジトリのmasterにプッシュ Githubのリポジトリであるリモートリポジトリの`master`にプッシュすると、プルリクやコードレビューをすっとばして`master`に反映させることになります。つまり、大事なプロダクトのソースコードが一瞬で書き換えられてしまうということなのでやめましょう。 これを防ぐためにも、普段のプログラミング学習から、GitとGithubを利用したバージョン管理の練習はしておいたほうがいいです。現役のプログラマーも、自身が学習した際のソースコードに関してはGithubにプッシュして管理しているので、その習慣は初心者の時から身につけているといいかと思います。 # bundle update ダメゼッタイ gemをインストールする際、`bundle install`と`bundle update`があるのですが、`bundle update`は`Gemfile.lock`に書かれている全てのgemのバージョンを書き換えてしまいます。 そのため、バージョンによる不具合が発生してしまい、サービスが動かなくなってしまう可能性が高くなります。影響範囲がものすごく大きく、かつ、深刻なエラーにつながるので、現場では絶対にやめましょう！めっちゃ怒られます！ # わからなくても質問をしない 現場では、求められている結果を出すことが最優先です。つまり、自分が恥をかくからといって質問せず、何１つ進捗を生まないことは悪でしかありません。 確かに自分の頭で考えて動くことはとても大切です。だからと言って、それにこだわるあまり仕事が遅れてしまっては何の意味もありません。 もしかしたら質問をすることによって実際に恥をかくこともあるかもしれません。しかし、質問しなければ自分自身がまったく成長せず、進捗も遅れて現場からの信頼も失い、今よりもさらに悪い結果を招くことになります。将来リモートで働きたい人にとって、信頼を失うことは死に等しいと考えたほうがいいでしょう。 「自分で悩んで苦しい思いをするより、恥を気にせず質問したほうがよっぽどいい方向に物事が進む」ということはプログラマーにかかわらず、どの職業でも共通して言えることなので強く意識しておきましょう。プログラマーであるまえに、いちビジネスマンとして優秀であれ、ということです。
Git,Gitの基本,
Git,Gitで使用するテキストエディタ、Vimの使い方,
Git,Gitコマンド一覧,
Git,GitとGithubを利用した共同開発,
Git,Gitコマンドの状況に応じた使い分け,
Ruby,入出力を行うためのメソッド一覧,
Ruby,変数,
Ruby,条件分岐,
Ruby,メソッド,
Ruby,配列,
Ruby,繰り返し処理,
Ruby,ハッシュ,
Ruby,オブジェクト指向,
Ruby,RSpec,
Ruby,YouTube検索を実装するAPI,
Ruby on Rails,Ruby on Rails の基本,
Ruby on Rails,Ruby on Rails で Hello World!!,
Ruby on Rails,Ruby on Rails アプリのデプロイ,
Ruby on Rails,SQLの基本,
Ruby on Rails,CRUD処理の実装,
Ruby on Rails,Active Recordの様々なメソッド,
Ruby on Rails,Active Record の様々な削除メソッド,
Ruby on Rails,resources を使ったCRUD処理の実装,
Ruby on Rails,Bootstrap の導入,
Ruby on Rails,CSVデータインポート機能,
Ruby on Rails,Rakeタスク,
Ruby on Rails,ログイン機能,
Ruby on Rails,管理者画面,
Ruby on Rails,検索機能,
Ruby on Rails,画像投稿機能,
Ruby on Rails,テストコードの実装（RSpec）,
Ruby on Rails,RailsアプリへのMarkdownの導入,